#include "udpncrecoder.h"
#include "udpnc_decoder.h"
#include <iostream>
#include <assert.h>

int main()
{
    unsigned char data634[] = {0xbd, 0x66,  0x03, 0x00,  0x00, 0x01,  0x00, 0xe0,  0x00, 0x00,  0x00, 0x00,  0xa1, 0x4b,  0x2c, 0x8b,
                   0xe0, 0x48,  0x0f, 0x58,  0x01, 0x00,  0x0d, 0x04,  0x02, 0x00,  0x00, 0x0a,  0x01, 0x00,  0x00, 0x0a,
                   0x0d, 0x04,  0x00, 0x00,  0xba, 0x0c,  0x00, 0x50,  0x01, 0x00,  0x0d, 0x04,  0x02, 0x00,  0x00, 0x0a,
                   0x18, 0x00,  0x00, 0x00,  0x2b, 0x00,  0x02, 0x03,  0x01, 0x01,  0x01, 0x00,  0x0d, 0x04,  0x01, 0x00,
                   0x00, 0x0a,  0x02, 0x40,  0x0d, 0x04,  0x02, 0x00,  0x00, 0x0a,  0x35, 0x19,  0xb7, 0x07,  0x6b, 0x01,
                   0x00, 0x00,  0x00, 0x80,  0xa7, 0x43,  0x00, 0x00,  0x03, 0x43};
    size_t data634_len = 90;

    unsigned char data179[] = {0xdd, 0xb6,  0x02, 0x00,  0x00, 0x01,  0x00, 0xe0,  0x00, 0x00,  0x00, 0x00,  0x7b, 0x26,  0xe2, 0xc8,
                   0xc8, 0xf0,  0x39, 0xf9,  0x01, 0x00,  0x0d, 0x04,  0x01, 0x00,  0x00, 0x0a,  0x02, 0x00,  0x00, 0x0a,
                   0x0d, 0x04,  0x39, 0xf9,  0xfa, 0x09,  0x00, 0x50,  0x01, 0x00,  0x0d, 0x04,  0x01, 0x00,  0x00, 0x0a,
                   0x0d, 0x00,  0x00, 0x00,  0x2d, 0x00,  0x03, 0x01,  0x01, 0x01,  0x01, 0x00,  0x0d, 0x04,  0x02, 0x00,
                   0x00, 0x0a,  0x02, 0x40,  0x0d, 0x04,  0x02, 0x00,  0x00, 0x0a,  0x03, 0x00,  0x00, 0x00,  0x01};

    size_t data179_len = 79;

    UDPNCMessage msg634;
    msg634.deserialize(reinterpret_cast<char*>(data634), data634_len);

    UDPNCMessage msg179;
    msg179.deserialize(reinterpret_cast<char*>(data179), data179_len);

    UDPNCrecoder recoder;

    recoder.addUDPNCMessage(msg634);
    recoder.addUDPNCMessage(msg179);

    std::shared_ptr<UDPNCMessage> temp_msg = recoder.produceUDPNCMessage();

    if (!temp_msg)
    {
        std::cout << "Could not produce encoded UDPNC messages" << std::endl;
        exit(EXIT_FAILURE);
    }

    udpNC_decoder decoder;

    decoder.addUDPNCMessage(*temp_msg);
    decoder.addUDPNCMessage(msg179);

    std::shared_ptr<UDPNCMessage> decoded_msg = decoder.produceDecodedUDPNCMessage();

    if (decoded_msg == NULL)
    {
        std::cout << "Could not produce decoded UDPNC messages" << std::endl;
        exit(EXIT_FAILURE);
    }

    assert(*decoded_msg == msg634);


}
